.TH "/devel/graphdata/graphDataLib/src/graphInit.c" 3 "Graph Data Shared Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/devel/graphdata/graphDataLib/src/graphInit.c
.SH SYNOPSIS
.br
.PP
\fC#include <graphInit\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <util/crudops\&.h>\fP
.br
\fC#include <impl/arraygraph\&.h>\fP
.br
\fC#include <impl/arrayops\&.h>\fP
.br
\fC#include <impl/linkgraph\&.h>\fP
.br
\fC#include <impl/linkops\&.h>\fP
.br
\fC#include <impl/hashgraph\&.h>\fP
.br
\fC#include <impl/sharedmemgraph\&.h>\fP
.br
\fC#include <impl/sharedmemops\&.h>\fP
.br
\fC#include <impl/sharedmmapgraph\&.h>\fP
.br
\fC#include <impl/sharedmmapops\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBgraph_t\fP * \fBinitGraph\fP (enum \fBGRAPHDOMAIN\fP typeflags, size_t lblcount, struct \fBdimensions_t\fP *dims)"
.br
.RI "Initialize a graph according to the flags set in the GRAPHDOMAIN value\&. "
.ti -1c
.RI "struct \fBgraphops_t\fP * \fBgetOperations\fP (struct \fBgraph_t\fP *g)"
.br
.RI "Create and fill the \fBgraphops_t\fP structure that handles basic operations for the graph\&. "
.ti -1c
.RI "int \fBclearGraph\fP (struct \fBgraph_t\fP *g)"
.br
.RI "Clear out the graph's underlying structures, and null out the memory\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "int clearGraph (struct \fBgraph_t\fP * g)"

.PP
Clear out the graph's underlying structures, and null out the memory\&. All underlying graph structures will be cleared and the associated memory to the structures freed\&.
.PP
\fBParameters\fP
.RS 4
\fIg\fP Graph to be cleared 
.RE
.PP
\fBReturns\fP
.RS 4
1 if successful; otherwise, 0\&. 
.RE
.PP

.SS "struct \fBgraphops_t\fP * getOperations (struct \fBgraph_t\fP * g)"

.PP
Create and fill the \fBgraphops_t\fP structure that handles basic operations for the graph\&. Create and fill the graphOps_t structure that handles basic operations for the graph\&.
.PP
Using the \fBgraph_t\fP implementation pass, this function creates a \fBgraphops_t\fP structure necessary to handle basic functions for the given graph\&.
.PP
\fBParameters\fP
.RS 4
\fIg\fP Graph structure being used 
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to a new \fBgraphops_t\fP structure, if successful; otherwise, a pointer to NULL 
.RE
.PP

.SS "struct \fBgraph_t\fP * initGraph (enum \fBGRAPHDOMAIN\fP typeflags, size_t lblcount, struct \fBdimensions_t\fP * dims)"

.PP
Initialize a graph according to the flags set in the GRAPHDOMAIN value\&. Using the flags set in the typeflags parameter, create a graph structure capable of supporting the requirements in an efficient (memory or Big-O) manner\&.
.PP
The parameter gtype holds the flags for what graph is desired\&. For example, For a directed graph, used to represent a set of cartesian coordinates and no extra label nodes, pass in the value created by DIRECTED | LINKED | SPATIAL | UNLABELED\&.
.PP
If an empty set of flags are passed to the typeflags parameter, the returned graph will be UNDIRECTED | LINKED | GENERIC | UNLABELED\&.
.PP
\fBParameters\fP
.RS 4
\fIgtype\fP Type of graph implementation to be created\&. Flag values set underlying structures and metadata\&. 
.br
\fIlblcount\fP Number of label nodes to be used within the graph\&. Required for LABELED flag; ignored for all others\&. 
.br
\fIdims\fP Dimensional parameters structure\&. Required for ARRAY | SPATIAL graphs; otherwise, may be NULL\&. The returned graph will hold the reference to the structure that was passed\&. 
.RE
.PP
\fBReturns\fP
.RS 4
If successful and valied, initialized graph structure, according to the flags\&. Otherwise, a NULL pointer\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Graph Data Shared Library from the source code\&.
