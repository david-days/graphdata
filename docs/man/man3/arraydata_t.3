.TH "arraydata_t" 3 "Graph Data Shared Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
arraydata_t \- Array implementation of the graph structure for fixed-size, fixed-degree, UNDIRECTED graphs\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <arraygraph\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "size_t \fBnodelen\fP"
.br
.RI "Length of the node array\&. "
.ti -1c
.RI "size_t \fBedgelen\fP"
.br
.RI "Length of the edge array\&. "
.ti -1c
.RI "size_t \fBdegree\fP"
.br
.RI "Degree of the nodes--the number of (possible) edges coming out of each node\&. "
.ti -1c
.RI "size_t \fBarraylen\fP"
.br
.RI "Length of the arrays\&. "
.in -1c
.SH "Detailed Description"
.PP 
Array implementation of the graph structure for fixed-size, fixed-degree, UNDIRECTED graphs\&. 

The array implementation of the graph structure is based on an UNDIRECTED, fixed-size and fixed maximum degree for the nodes\&.
.PP
Because the graph is UNDIRECTED, the start of each edge will actually be minNode(u,v) and the end of each edge will be maxNode(u,v)\&. Thus, node 0 can connect 'upwards', but no higher nodes can connect down to node 0\&. In all the underlying operations, having 0 in a node reference value indicates an unused edge reference\&.
.PP
Metadata structure for array graphs 
.SH "Field Documentation"
.PP 
.SS "size_t arraydata_t::arraylen"

.PP
Length of the arrays\&. This length is actually nodecount * degree for the ARRAY implementation 
.SS "size_t arraydata_t::degree"

.PP
Degree of the nodes--the number of (possible) edges coming out of each node\&. 
.SS "size_t arraydata_t::edgelen"

.PP
Length of the edge array\&. 
.SS "size_t arraydata_t::nodelen"

.PP
Length of the node array\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Graph Data Shared Library from the source code\&.
